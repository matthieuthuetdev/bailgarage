<?php
class PaymentHistories
{
    private $connection;

    public function __construct()
    {
        $this->connection = Database::getInstance();
    }

    public function create($_leasesId, $_paymentId, $_amount, $_paymentDate)
    {
        $request = "INSERT INTO paymentHistories (leasesId, paymentId, amount, paymentDate) VALUES (:leasesId, :paymentId, :amount, :paymentDate)";
        $rq = $this->connection->prepare($request);
        $rq->bindValue(":leasesId", $_leasesId, PDO::PARAM_INT);
        $rq->bindValue(":paymentId", $_paymentId, PDO::PARAM_INT);
        $rq->bindValue(":amount", $_amount);
        $rq->bindValue(":paymentDate", $_paymentDate, PDO::PARAM_STR);
        return $rq->execute();
    }

    public function read($_ownerId, $_paymentId = null)
    {
        if (is_null($_paymentId)) {
            $request = "SELECT paymentHistories.*, leases.id AS leasesId FROM paymentHistories INNER JOIN leases ON paymentHistories.leasesId = leases.id WHERE leases.ownerId = :ownerId";
            $rq = $this->connection->prepare($request);
            $rq->bindValue(":ownerId", $_ownerId, PDO::PARAM_INT);
            $rq->execute();
            return $rq->fetchAll(PDO::FETCH_ASSOC);
        } elseif (is_null($_paymentId)) {
            $request = "SELECT paymentHistories.* FROM paymentHistories INNER JOIN leases ON paymentHistories.leasesId = leases.id WHERE leases.ownerId = :ownerId AND paymentHistories.leasesId = :leasesId";
            $rq = $this->connection->prepare($request);
            $rq->bindValue(":ownerId", $_ownerId, PDO::PARAM_INT);
            $rq->execute();
            return $rq->fetchAll(PDO::FETCH_ASSOC);
        } else {
            $request = "SELECT paymentHistories.* FROM paymentHistories INNER JOIN leases ON paymentHistories.leasesId = leases.id WHERE leases.ownerId = :ownerId AND paymentHistories.id = :paymentId";
            $rq = $this->connection->prepare($request);
            $rq->bindValue(":ownerId", $_ownerId, PDO::PARAM_INT);
            $rq->bindValue(":paymentId", $_paymentId, PDO::PARAM_INT);
            $rq->execute();
            return $rq->fetch(PDO::FETCH_ASSOC);
        }
    }

    public function update($_paymentId, $_leasesId, $_amount, $_paymentDate)
    {
        $request = "UPDATE paymentHistories SET leasesId = :leasesId, amount = :amount, paymentDate = :paymentDate WHERE id = :paymentId";
        $rq = $this->connection->prepare($request);
        $rq->bindValue(":paymentId", $_paymentId, PDO::PARAM_INT);
        $rq->bindValue(":leasesId", $_leasesId, PDO::PARAM_INT);
        $rq->bindValue(":amount", $_amount);
        $rq->bindValue(":paymentDate", $_paymentDate, PDO::PARAM_STR);
        return $rq->execute();
    }

    public function delete($_paymentId, $_ownerId)
    {
        $check = $this->connection->prepare("SELECT paymentHistories.id FROM paymentHistories INNER JOIN leases ON paymentHistories.leasesId = leases.id WHERE paymentHistories.id = :paymentId AND leases.ownerId = :ownerId");
        $check->bindValue(":paymentId", $_paymentId, PDO::PARAM_INT);
        $check->bindValue(":ownerId", $_ownerId, PDO::PARAM_INT);
        $check->execute();

        if ($check->fetch()) {
            $request = "DELETE FROM paymentHistories WHERE id = :paymentId";
            $rq = $this->connection->prepare($request);
            $rq->bindValue(":paymentId", $_paymentId, PDO::PARAM_INT);
            return $rq->execute();
        }

        return false;
    }
}
